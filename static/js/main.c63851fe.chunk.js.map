{"version":3,"sources":["img/velebitas.jpg","img/grapa.jpg","components/NavBar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","AppBar_default","position","Toolbar_default","withStyles","card","maxWidth","margin","media","height","props","classes","_props$uspon","uspon","penjaci","img","datumUspona","_props$uspon$smjer","smjer","imeSmjera","lokacijaSmjera","ocjenaSmjera","Card_default","className","CardActionArea_default","CardMedia_default","image","title","CardContent_default","Typography_default","gutterBottom","variant","component","join","CardActions_default","Button_default","size","color","App","components_NavBar","Bookmarks_default","index_es","placeholder","label","components_Card","IMG1","IMG2","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uSCezBC,EAXA,WACX,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,UACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,4JCmDGK,2BAhDA,CACbC,KAAM,CACJC,SAAU,IACVC,OAAQ,OAEVC,MAAO,CACLC,OAAQ,MA0CGL,CAtCf,SAAmBM,GAAO,IAChBC,EAAsGD,EAAtGC,QADgBC,EACsFF,EAA7FG,MAASC,EADFF,EACEE,QAASC,EADXH,EACWG,IAAKC,EADhBJ,EACgBI,YADhBC,EAAAL,EAC6BM,MAASC,EADtCF,EACsCE,UAAWC,EADjDH,EACiDG,eAAgBC,EADjEJ,EACiEI,aACzF,OACEvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAMwB,UAAWZ,EAAQN,MACvBP,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,KACED,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACEwB,UAAWZ,EAAQH,MACnBkB,MAAQX,EACRY,MAAM,0BAER7B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,KACAD,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAY+B,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC3Cb,EADL,IACiBE,GAEfvB,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAYiC,UAAU,KACnBZ,GAEHtB,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAYiC,UAAU,KACrBhB,EADD,YACuBF,EAAQmB,KAAK,SAIxCnC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,KACED,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAQqC,KAAK,QAAQC,MAAM,WAA3B,kBAGAvC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAQqC,KAAK,QAAQC,MAAM,WAA3B,iECLOC,mLAhCX,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAQgC,QAAQ,WAAWM,MAAM,WAC/BvC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,OAHJ,IAIYD,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAWC,YAAY,mBAAmBC,MAAM,oBAChD7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAW/B,MAAO,CACdC,QAAQ,CAAC,uBAAmB,4BAC5BC,IAAK8B,IACL7B,YAAY,cACZE,MAAM,CACFC,UAAU,iBACVC,eAAe,8DACfC,aAAa,UAGrBvB,EAAAC,EAAAC,cAAC4C,EAAD,CAAW/B,MAAO,CACdC,QAAQ,CAAC,aAAc,oBACvBC,IAAK+B,IACL9B,YAAY,cACZE,MAAM,CACFC,UAAU,0BACVE,aAAa,WACbD,eAAe,wDA1Bb2B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c63851fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/velebitas.cad2dcbd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/grapa.423a722c.jpg\";","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                React Material UI Example\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345,\r\n    margin: '1em',\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n};\r\n\r\nfunction MediaCard(props) {\r\n  const { classes, uspon: { penjaci, img, datumUspona, smjer: { imeSmjera, lokacijaSmjera, ocjenaSmjera } } } = props;\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image= {img}\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {imeSmjera},{ocjenaSmjera}\r\n        </Typography>\r\n          <Typography component=\"i\">\r\n            {lokacijaSmjera}\r\n          </Typography>\r\n          <Typography component=\"p\">\r\n          {datumUspona} penjali {penjaci.join(', ')}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Detalji uspona\r\n        </Button>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Želim to penjati\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(MediaCard);","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Bookmarks from '@material-ui/icons/Bookmarks';\nimport NavBar from './components/NavBar';\nimport { TextField } from '@material-ui/core';\nimport MediaCard from './components/Card';\nimport IMG1 from './img/velebitas.jpg';\nimport IMG2 from './img/grapa.jpg';\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Button variant=\"outlined\" color=\"primary\">\n          <Bookmarks></Bookmarks>\n        </Button> <br />\n        <TextField placeholder=\"Placeholder here\" label=\"Basic TextField\" />\n        <MediaCard uspon={{\n            penjaci:['Dragutin Vdović', 'Nikola Derežić'],\n            img: IMG1,\n            datumUspona:'23.03.2019.',\n            smjer:{\n                imeSmjera:'Velebitaš',\n                lokacijaSmjera:'Sjeverna stijena, Anića kuk, Velika Paklenica, Croatia',\n                ocjenaSmjera:'6a+'\n              }\n            }} />\n        <MediaCard uspon={{\n            penjaci:['Rene Lisac', 'Marin Šapit'],\n            img: IMG2,\n            datumUspona:'23.03.2019.',\n            smjer:{\n                imeSmjera:'Pripravniška grapa',\n                ocjenaSmjera:'VI+ / M3',\n                lokacijaSmjera:'Mala Mojstrovka, Julijske alpe, Slovenija',\n              }\n            }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}